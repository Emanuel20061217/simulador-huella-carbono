# This is a basic workflow to help you get started with Actions

name: CI/CD Pipeline
on:
  push:
    branches: [ develop, main ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [backend, frontend, calculo_py]
    steps:
      - uses: actions/checkout@v2
      - name: Setup ${{ matrix.service }}
        if: matrix.service == 'frontend'
        uses: actions/setup-node@v2
        with:
          node-version: '16'
      - name: Setup Python
        if: matrix.service == 'calculo_py'
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          if [ ${{ matrix.service }} == 'frontend' ]; then cd frontend && npm ci; fi
          if [ ${{ matrix.service }} == 'backend' ]; then cd backend && npm ci; fi
          if [ ${{ matrix.service }} == 'calculo_py' ]; then pip install -r backend/requirements.txt; fi
      - name: Lint
        run: |
          if [ ${{ matrix.service }} == 'frontend' ]; then cd frontend && npm run lint; fi
          if [ ${{ matrix.service }} == 'backend' ]; then cd backend && npm run lint; fi
          if [ ${{ matrix.service }} == 'calculo_py' ]; then pylint backend/calculo/*.py; fi
      - name: Test
        run: |
          if [ ${{ matrix.service }} == 'frontend' ]; then cd frontend && npm test -- --coverage; fi
          if [ ${{ matrix.service }} == 'backend' ]; then cd backend && npm test; fi
          if [ ${{ matrix.service }} == 'calculo_py' ]; then cd backend && pytest; fi
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2

  build-and-deploy:
    needs: lint-and-test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build Docker images
        run: |
          docker build -t myorg/simulador-backend:latest backend
          docker build -t myorg/simulador-frontend:latest frontend
      - name: Push images
        env:
          CR_PAT: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo $CR_PAT | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker push myorg/simulador-backend:latest
          docker push myorg/simulador-frontend:latest
      - name: Deploy to Production
        run: |
          kubectl set image deployment/backend backend=myorg/simulador-backend:latest
          kubectl set image deployment/frontend frontend=myorg/simulador-frontend:latest
